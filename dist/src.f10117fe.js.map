{"version":3,"sources":["src/models/Eventing.ts","src/models/user.ts","src/index.ts"],"names":[],"mappings":";;;;;;AEAA,IAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AFGA,ACHA,IDGA,ACHA,QDGA,ECHA,GAAA,OAAA,CAAA,YAAA,CAAA;ACEA,AFCA,IEDM,IAAI,GAAG,IAAI,MAAA,CAAA,IAAJ,CAAS;AFCtB,ACKA,ECNuB,EDMvB,ECN2B,EAAC,ADM5B,IDLA,UEDsB;ADMtB,ECN4C,AFC5C,GED+C,EAAC,IFChD,QAAA,GAAA;AEDsB,ADMtB,CCNa,CAAb,EAEA,AFAI,KAAA,GCIJ,GDJI,GAAqC,EAArC;EAqBH,ACdG,SAAA,IAAA,CAAqB,IAArB,EAAoC;ACNxC,IAAI,ADMqB,CCNpB,IAAL,ADMyB,ICJzB,ADIyB,GAAA,IAAA;ACFzB,EFHI,ECGO,KAAA,CDHP,CAAA,ICGO,GAAmB,EDH1B,CAAA,CCG8B,CDH9B,GAAA,MCG8B,CAAA,GDH3B,KCGuB,EAAnB,EDHP,EAAsB,QAAtB,EAAwC;AEK5C,EDA2C,EDJnC,IAAM,QAAQ,GAAG,KAAK,MAAL,CAAY,SAAZ,KAA0B,EAA3C;AEKR,IFJQ,QAAQ,CAAC,IAAT,CAAc,QAAd,EAFoC,CAGpC;AEIR,EDAI,IAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,QAAJ,EAAoB;ACCxB,IFJQ,ACIA,KDJK,ECIE,IDJP,CAAY,ACIA,IAAL,CAAU,IDJjB,IAAyB,ACIlB,CAAP,ODJA;AEKR,EFJM,ACID,CDTD,ACOA,CDVJ,CAUI;AEGJ;AACA,EDAI,IAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,MAAJ,EAAqB;ACCzB,EFJI,ECIK,MDJL,ACIW,CDJX,ACIY,MAAP,CAAc,EDJnB,CAAA,ECIwB,IAAnB,CDJL,CCI8B,EDJ9B,ICIK,MDJG,SAAR,EAAyB;AEK7B,EDAK,CAFD,CDFI,IAAM,QAAQ,GAAG,KAAK,MAAL,CAAY,SAAZ,CAAjB;AEMR;AAGA,EDHA,EDJQ,IAAG,CAAC,ACIZ,IAAA,IDJW,IAAa,QAAQ,CAAC,MAAT,KAAoB,CAApC,EAAsC;ACT9C,CAAA,EAAA,GDUY;IACH;ACXI,OAAA,CAAA,IAAA,GAAA,IAAA;IDaL,QAAQ,CAAC,OAAT,CAAiB,UAAA,QAAA,EAAQ;MACrB,QAAQ;IACX,CAFD;EAGH,CAVD;;EAWJ,OAAA,QAAA;AAtBA,CAAA,EAAA;;AAAa,OAAA,CAAA,QAAA,GAAA,QAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["// add type Aielus, the return type is a function\r\ntype Callback = () => void;\r\n\r\nexport class Eventing {\r\n    events: {[key:string]: Callback[]} = {};\r\n    \r\n    on(eventName: string, callback: Callback): void {\r\n        const handlers = this.events[eventName] || [];\r\n        handlers.push(callback);\r\n        //why do we have this function below\r\n        this.events[eventName] = handlers;\r\n     } \r\n\r\n    // gives us the output of an event using its name\r\n    trigger(eventName: string): void {\r\n        const handlers = this.events[eventName];\r\n\r\n        if(!handlers || handlers.length === 0){\r\n            return\r\n        }\r\n\r\n        handlers.forEach(callback => {\r\n            callback();\r\n        })\r\n    }\r\n}\r\n","import { Eventing } from './Eventing';\r\n\r\ninterface UserProps{\r\n    id?:number;\r\n    name?: string;\r\n    age?: number;\r\n}\r\n\r\nexport class User {\r\n    public events: Eventing = new Eventing();\r\n\r\n    constructor (private data: UserProps){}\r\n\r\n    get(propName: string): (number|string){\r\n        return this.data[propName];\r\n    }\r\n\r\n    set(update: UserProps): void{\r\n         Object.assign(this.data, update);\r\n    }\r\n   \r\n}","import { User } from \"./models/user\";\r\n\r\nconst user = new User({name:\"new Record33\", age:23});\r\n\r\n// user.set({name: \"NewuName\", age: 9989});\r\nuser.save();\r\n\r\n// user.fetch();\r\n\r\n//const user = new User({name: \"My Name\", age: 20});\r\n\r\n// user.on('name', ()=> {\r\n//    console.log('change')\r\n//});\r\n// user.on(\"change\", () => {\r\n//    console.log(\"change 2\")\r\n// })\r\n// user.on(\"changeee\", () => {\r\n//     console.log('save was triggered')\r\n// })\r\n\r\n// user.trigger('name');\r\n\r\n\r\n// console.log(user);"]}